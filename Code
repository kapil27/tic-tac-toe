

def display_board(board):
    # clear_output()
    print('  |   |')
    print('' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('  |   | ')
    print('--|---|---')
    print('  |   |')
    print('' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('  |   | ')
    print('--|---|---')
    print('  |   |')
    print('' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('  |   | ')


board = ['x'] * 10
# display_board(board)


# waf to take palyer input and assign heir mark as 0 or 1
player1 = input('Enter player 1 name : ')
player2 = input('Enter player 2 name : ')


def player_input():
    marker = ''
    while not (marker == 'O' or marker == 'X'):
        if random.randint(0, 1) == 0:  # randint returns random integer from (a,b ) inclusively
            marker = input(player1.upper() + " : do yu want to be X or O").upper()
        else:
            marker = input(player2.upper() + " : do yu want to be X or O").upper()

    if marker == 'X':
        return 'X', 'O'
    else:
        return 'O', 'X'


# player_input()


# step 3: write a funcn that assign marker to the desired position
def place_marker(board, marker, position):
    board[position] = marker  # assignening mark to the dewsired positin

 
def win_check(board, mark):
    return ((board[7] == mark and board[8] == mark and board[9] == mark) or
            (board[4] == mark and board[5] == mark and board[6] == mark) or
            (board[1] == mark and board[2] == mark and board[3] == mark) or
            (board[7] == mark and board[4] == mark and board[1] == mark) or
            (board[8] == mark and board[5] == mark and board[2] == mark) or
            (board[9] == mark and board[6] == mark and board[3] == mark) or
            (board[7] == mark and board[5] == mark and board[3] == mark) or
            (board[9] == mark and board[5] == mark and board[1] == mark))


# step 5: random moduile to dicode which player goes first
import random


def choose_first():
    if random.randint(0, 1) == 0:  # randint returns random integer from (a,b ) inclusively
        return player1
    else:
        return player2


# print(choose_first())
# print(choose_first()) checking wheter randint() works fine or not

# step 6: waf that return s a boolean indicating whether a space on the board is freelu available
def space_check(board, position):
    return board[position] == ' '


# step 7 : funcn that check whether the board is full or not
def full_board_check(board):
    for i in range(1, 10):
        if space_check(board, i):
            return False
    return True


# step 8: funcn that ask for player's next position and uses the space check funcn to justify player's choice
def player_choice(player, board):
    position = ' '
    while position not in '1 2 3 4 5 6 7 8 9'.split() or not space_check(board, int(position)):
        position = input(player.upper() + " choose your next position: (1-9)")
    return int(position)  # I'm retruning the position as integer form so that it can be used later


# step 9 : ask player if he wants to play again
def replay():
    return input('Do you want to play again? Enter yes or No').lower().startswith(
        'y')  # check whether the string start with y ; then return true


# step 10: use of all the functions made above
print('Welcome to tic tac toe!')

while True:
    theBoard = [' '] * 10
    player1_marker, player2_marker = player_input()
    turn = choose_first()
    print(turn.upper() + ' will go first!')

    game_on = True
    while game_on:
        if turn == player1:  # player1 turns
            display_board(theBoard)
            position = player_choice(player1, theBoard)
            place_marker(theBoard, player1_marker, position)

            if win_check(theBoard, player1_marker):  # if player1 wins the game
                display_board(theBoard)
                print("congratulations!! " + player1.upper() + " has won")
                game_on = False
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print('the game is draw!')
                    break
                else:
                    turn = player2
        else:
            display_board(theBoard)
            position = player_choice(player2, theBoard)
            place_marker(theBoard, player2_marker, position)

            if win_check(theBoard, player2_marker):  # if player1 wins the game
                display_board(theBoard)
                print("congratulations!! " + player2.upper() + " has won")
                game_on = False
            else:
                if full_board_check(theBoard):
                    display_board(theBoard)
                    print('the game is draw!')
                    break
                else:
                    turn = player1

    if not replay():
        break
